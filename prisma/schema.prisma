// #region Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------
//  Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = "postgresql://postgres:02Ago1962@localhost:5432/square_project"
  extensions = [postgis]
}

// #endregion

// #region Enums
//  ------------------------------------------------------------------------------------------------------------
//  Enums
//  ------------------------------------------------------------------------------------------------------------

enum WeekDays {
  SUNDAY    @map("Sunday")
  MONDAY    @map("Monday")
  TUESDAY   @map("Tuesday")
  WEDNESDAY @map("Wednesday")
  THURSDAY  @map("Thursday")
  FRIDAY    @map("Friday")
  SATURDAY  @map("Saturday")

  @@map("week_days")
}

enum BrazilianStates {
  ACRE                @map("Acre")
  ALAGOAS             @map("Alagoas")
  AMAPA               @map("Amapa")
  AMAZONAS            @map("Amazonas")
  BAHIA               @map("Bahia")
  CEARA               @map("Ceara")
  DISTRITO_FEDERAL    @map("Distrito Federal")
  ESPIRITO_SANTO      @map("Espirito Santo")
  GOIAS               @map("Goias")
  MARANHAO            @map("Maranhao")
  MATO_GROSSO         @map("Matro Grosso")
  MATO_GROSSO_DO_SUL  @map("Mato Grosso do Sul")
  MINAS_GERAIS        @map("Minas Gerais")
  PARA                @map("Para")
  PARAIBA             @map("Paraiba")
  PARANA              @map("Parana")
  PERNAMBUCO          @map("Pernambuco")
  PIAUI               @map("Piaui")
  RIO_DE_JANEIRO      @map("Rio de Janeiro")
  RIO_GRANDE_DO_NORTE @map("Rio Grande do Norte")
  RIO_GRANDE_DO_SUL   @map("Rio Grande do Sul")
  RONDONIA            @map("Rondonia")
  RORAIMA             @map("Roraima")
  SANTA_CATARINA      @map("Santa Catarina")
  SAO_PAULO           @map("Sao Paulo")
  SERGIPE             @map("Sergipe")
  TOCANTINS           @map("Tocantins")

  @@map("brazilian_states")
}

enum LocationTypes {
  CENTRAL_AND_LARGE_FLOWERBEDS                    @map("Central and Large Flowerbeds")
  COURT_EDGE                                      @map("Court Edges")
  GARDEN                                          @map("Garden")
  SQUARE                                          @map("Square")
  OVERLOOK                                        @map("Overlook")
  PARK                                            @map("Park")
  FENCED_PARK                                     @map("Fenced Park")
  UNOCCUPIED_PLOT                                 @map("Unoccupied Plot")
  REMNANTS_OF_ROAD_CONSTRUCTION_AND_LAND_DIVISION @map("Remnants of Road Construction/Land Division")
  ROUNDABOUTS                                     @map("Roundabouts") // não achei nenhuma informação sobre o que são rotatórios então considerei que eram rotatórias
  INTERCHANGE                                     @map("Interchange")

  @@map("location_types")
}

enum UserTypes {
  ADMIN      @map("Admin")
  RESEARCHER @map("Researcher")

  @@map("user_types")
}

enum CategoryTypes {
  FOR_SOCIAL_PRACTICES              @map("for Social Practices")
  OPEN_SPACE_FOR_NON_COLLECTIVE_USE @map("Open Space for non-Collective Use")

  @@map("category_types")
}

enum QuestionTypes {
  TEXT    @map("Text")
  NUMERIC @map("Numeric")
  OPTIONS @map("Options")

  @@map("question_types")
}

enum OptionTypes {
  SELECTION @map("selection")
  RADIO     @map("radio")
  CHECKBOX  @map("checkbox")

  @@map("option_types")
}

enum Condition {
  TERRIBLE @map("terrible")
  POOR     @map("poor")
  GOOD     @map("good")
  GREAT    @map("great")

  @@map("maintenance")
}

enum Interference {
  SMALL  @map("small")
  MEDIUM @map("medium")
  GREAT  @map("great")

  @@map("interference")
}

enum Visibility {
  UP_TO_25  @map("up to 25%")
  UP_TO_50  @map("up to 50%")
  UP_TO_75  @map("up to 75%")
  UP_TO_100 @map("up to 100%")

  @@map("visibility")
}

enum AgeGroup {
  CHILD   @map("child")
  TEEN    @map("teen")
  ADULT   @map("adult")
  ELDERLY @map("elderly")

  @@map("age_group")
}

enum Activity {
  SEDENTARY @map("sedentary")
  WALKING   @map("walking")
  STRENUOUS @map("strenuous")

  @@map("atividade")
}

// Don't really like naming this gender since you can't really tell someones gender based on the way they look
// but since they're going to be needing this data we might as well be as inclusive as possible
enum Gender {
  MALE       @map("male")
  FEMALE     @map("female")
  NON_BINARY @map("non-binary")

  @@map("gender")
}

enum NoiseLocation {
  CENTER       @map("center")
  SURROUNDINGS @map("surroundings")

  @@map("noise_categories")
}

// #endregion

// #region Auth
//  ------------------------------------------------------------------------------------------------------------
//  Auth
//  ------------------------------------------------------------------------------------------------------------

model User {
  id String @id @unique

  email           String?   @db.VarChar(255)
  username        String    @unique @db.VarChar(255)
  type            UserTypes
  hashed_password String

  auth_session Session[]

  assessmentId Int?        @map("assessment_id")
  Assessment   Assessment? @relation(fields: [assessmentId], references: [id])

  @@index([username])
  @@map("user")
}

model Session {
  id String @id @unique

  expiresAt DateTime @map("expires_at")

  userId String @map("user_id")
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

// #endregion

// #region Formulários
//  ------------------------------------------------------------------------------------------------------------
//  Formulários
//  ------------------------------------------------------------------------------------------------------------

model Category {
  id Int @id @default(autoincrement())

  name     String     @db.VarChar(255)
  optional Boolean    @default(false)
  active   Boolean    @default(true)
  question Question[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model Question {
  id Int @id @default(autoincrement())

  name     String        @db.VarChar(255)
  optional Boolean       @default(false)
  active   Boolean       @default(true)
  type     QuestionTypes

  TextQuestion    TextQuestion?
  NumericQuestion NumericQuestion?
  OptionsQuestion OptionsQuestion?

  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("question")
}

model TextQuestion {
  id Int @id @default(autoincrement())

  charLimit Int? @map("char_limit")

  questionId Int      @unique @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("text_question")
}

model NumericQuestion {
  id Int @id @default(autoincrement())

  min Int?
  max Int?

  questionId Int      @unique @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("numeric_question")
}

model OptionsQuestion {
  id Int @id @default(autoincrement())

  optionType OptionTypes @map("option_type")

  // Should only have a value if optionType == CHECKBOX
  maximumSelections Int? @map("maximum_selections")

  questionId Int      @unique @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  options Option[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("options_question")
}

model Option {
  id Int @id @default(autoincrement())

  text String @db.VarChar(255)

  optionsQuestionId Int             @map("options_question_id")
  OptionsQuestion   OptionsQuestion @relation(fields: [optionsQuestionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("option")
}

model Form {
  id Int @id @default(autoincrement())

  name String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("form")
}

// #endregion

// #region Informações da Praça
//  ------------------------------------------------------------------------------------------------------------
//  Informações da Praça
//  ------------------------------------------------------------------------------------------------------------

model Location {
  id Int @id @default(autoincrement())

  name                String    @db.VarChar(255)
  isPark              Boolean?  @map("is_park")
  notes               String?   @db.Text
  creationYear        DateTime? @map("creation_year") @db.Date
  lastMaintenanceYear DateTime? @map("last_maintenance_year") @db.Date
  overseeingMayor     String?   @map("overseeing_mayor") @db.VarChar(255)
  legislation         String?   @db.VarChar(255)
  usableArea          Float?    @map("usable_area")
  legalArea           Float?    @map("legal_area")
  incline             Float?
  inactiveNotFound    Boolean?  @map("inactive_not_found") // ? isso não seria por avaliação ao invés de por praça?
  polygonArea         Float?    @map("polygon_area")

  type     LocationTypes?
  category CategoryTypes?                               @map("category")
  polygon  Unsupported("Geometry(MultiPolygon, 4326)")?

  narrowAdministrativeUnitId       Int?
  narrowAdministrativeUnit         NarrowAdministrativeUnit?       @relation(fields: [narrowAdministrativeUnitId], references: [id])
  intermediateAdministrativeUnitId Int?
  intermediateAdministrativeUnit   IntermediateAdministrativeUnit? @relation(fields: [intermediateAdministrativeUnitId], references: [id])
  broadAdministrativeUnitId        Int?
  broadAdministrativeUnit          BroadAdministrativeUnit?        @relation(fields: [broadAdministrativeUnitId], references: [id])

  address    Address[]
  assessment Assessment[]
  tally      Tally[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("location")
}

model Address {
  id Int @id @default(autoincrement())

  neighborhood String @db.VarChar(255)
  street       String @db.VarChar(255)
  postalCode   String @map("postal_code") @db.VarChar(255)
  identifier   Int

  state BrazilianStates

  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("address")
}

model City {
  id Int @id @default(autoincrement())

  name String @unique @db.VarChar(255)

  narrowAdministrativeUnit       NarrowAdministrativeUnit[]
  intermediateAdministrativeUnit IntermediateAdministrativeUnit[]
  broadAdministrativeUnit        BroadAdministrativeUnit[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("city")
}

model NarrowAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_narrowUnitName")
  @@map("narrow_administrative_unit")
}

model IntermediateAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_intermediateUnitName")
  @@map("intermediate_administrative_unit")
}

model BroadAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_broadUnitName")
  @@map("broad_administrative_unit")
}

// #endregion

// #region Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------

model Assessment {
  id Int @id @default(autoincrement())

  startDate DateTime @map("start_date") @db.Timestamptz()
  endDate   DateTime @map("end_date") @db.Timestamptz()
  user      User[]

  changedDelimitation Boolean? @map("changed_delimitation") // ? o que é alteração limites?
  hasWifi             Boolean  @map("has_wifi")

  pavedSidewalk            Boolean @map("paved_sidewalk")
  trashCanAmount           Int     @map("trash_can_amount")
  bathroomAmount           Int     @map("bathroom_amount")
  payphoneAmount           Int     @map("payphone_amount")
  drinkingFountainAmount   Int     @map("drinking_fountain_amount")
  artworkAmount            Int     @map("artwork_amount")
  plannedLandscapingAmount Int     @map("planned_landscaping_amount")
  movableSeatsAmount       Int     @map("movable_seats_amount")

  sidewalkCondition           Condition @map("sidewalk_condition")
  trashCanCondition           Condition @map("trash_can_condition")
  bathroomCondition           Condition @map("bathroom_condition")
  payphoneCondition           Condition @map("payphone_condition")
  drinkingFountainCondition   Condition @map("drinking_fountain_condition")
  artworkCondition            Condition @map("artwork_condition")
  plannedLandscapingCondition Condition @map("planned_landscaping_condition")
  movableSeatsCondition       Condition @map("movable_seats_condition")

  accessibility       Accessibility?
  parkAccess          SurroundingArea?
  activitiesArea      ActivitiesArea[]
  destruction         Destruction?
  landscaping         Landscaping[]
  seating             Seating[]
  event               Events?
  trafficSafety       TrafficSafety?
  surroundingActivity SurroundingActivity?
  security            Security?
  noise               Noise[]

  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("Assessment")
}

// #endregion

// #region Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------

model Accessibility {
  id Int @id @default(autoincrement())

  surroundingSidewalkUnrestrictedLane Boolean @map("surrounding_sidewalk_unrestricted_lane")
  surroundingSidewalkServiceLane      Boolean @map("surrounding_sidewalk_service_lane")
  ampleHeight                         Boolean @map("ample_height")
  signaledCrosswalk                   Boolean @map("signaled_crosswalk")
  clearPaths                          Boolean @map("clear_paths")
  maximumIncline                      Boolean @map("maximum_incline")
  longitudinalIncline                 Boolean @map("longitudinal_incline")
  tactileSignage                      Boolean @map("tactile_signage")
  safetyCoatedFlooring                Boolean @map("safety_coated_flooring")
  impairedParkingAmount               Int     @map("impaired_parking_amount")
  elderlyParkingAmount                Int     @map("elderly_parking_amount")
  accessibleRoute                     Boolean @map("accessible_route")
  accessibleEquipment                 Boolean @map("accessible_equipment")

  assessmentId Int        @unique @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("accessibility")
}

model SurroundingArea {
  id Int @id @default(autoincrement())

  fencedWithOperatingHours Boolean @map("fenced_with_operating_hours")
  nameplate                Boolean
  busStandsAmount          Int     @map("bus_stands_amount")
  taxiParkingAmount        Int     @map("taxi_parking_amount")
  carParkingAmount         Int     @map("car_parking_amount")
  motorcycleParkingAmount  Int     @map("motorcycle_parking_amount")
  bikeLane                 Boolean @map("bike_lane")

  assessmentId Int        @unique @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("surrounding_area")
}

model ActivitiesArea {
  id Int @id @default(autoincrement())

  category      Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  requiredShade Boolean   @map("required_shade")
  lighting      Boolean
  fencing       Boolean
  benches       Boolean
  condition     Condition
  report        String?   @db.Text

  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("activities_area")
}

model Destruction {
  id Int @id @default(autoincrement())

  graffitiInterferenceLevel Interference @map("graffiti_interference_level")
  neglectInterferenceLevel  Interference @map("neglect_interference_level")

  assessmentId Int        @unique @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("destruction")
}

model Landscaping {
  id Int @id @default(autoincrement())

  category      Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  requiredShade Boolean   @map("required_shade")
  lighting      Boolean
  fencing       Boolean
  benches       Boolean
  condition     Condition
  report        String?   @db.Text

  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("landscaping")
}

// ↑ condensar esses dois em um modelo só? ↓
model Seating {
  id Int @id @default(autoincrement())

  category      Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  requiredShade Boolean   @map("required_shade")
  lighting      Boolean
  fencing       Boolean
  benches       Boolean
  condition     Condition
  report        String?   @db.Text

  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("seating")
}

model Events {
  id Int @id @default(autoincrement())

  yearlyIncidence Int @map("yearly_incidence")

  // TODO mudar para refletir o que o Klaus falou na reunião
  category   Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  maintainer String @db.VarChar(255) // pelo que entendi seria o nome do responsável pela praça, não por evento

  assessmentId Int        @unique @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("events")
}

model TrafficSafety {
  id Int @id @default(autoincrement())

  crosswalk    Boolean
  trafficLight Boolean @map("traffic_light")
  speedSignage Boolean @map("speed_signage")

  assessmentId Int        @unique @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("traffic_safety")
}

model SurroundingActivity {
  id Int @id @default(autoincrement())

  surroundingEstablishments String @map("surrounding_establishments") @db.Text

  assessmentId Int        @unique @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("surrounding_activity")
}

model Security {
  id Int @id @default(autoincrement())

  cameras         Boolean
  policeStation   Boolean    @map("police_station")
  visibilityLevel Visibility @map("visibility_level")

  assessmentId Int        @unique @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("security")
}

// #endregion

// #region Campos das Avaliações Não Relacionados à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações Não Relacionadas à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------

model Tally {
  id Int @id @default(autoincrement())

  // não é meio redundante armazenar a data separada?
  date      DateTime? @db.Date
  startDate DateTime? @db.Timestamptz(0)
  endDate   DateTime? @db.Timestamptz(0)

  animalsAmount    Int?    @map("animals_amount")
  temperature      Float?
  weatherCondition String? @map("weather_condition") @db.VarChar(255)

  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  tallyPerson TallyPerson[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tally")
}

model TallyPerson {
  id Int @id @default(autoincrement())

  tally   Tally @relation(fields: [tallyId], references: [id])
  tallyId Int   @map("tally_id")

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @map("person_id")

  quantity Int

  @@unique([tallyId, personId], name: "tally_id_person_id")
  @@map("tally_person")
}

model Person {
  id Int @id @default(autoincrement())

  ageGroup                    AgeGroup @map("age_group")
  gender                      Gender
  activity                    Activity @map("activity")
  isTraversing                Boolean  @map("is_traversing")
  isPersonWithImpairment      Boolean  @map("is_person_with_impairment") // * Inclusive language
  isInApparentIllicitActivity Boolean  @map("is_in_apparent_illicit_activity")
  isPersonWithoutHousing      Boolean  @map("is_person_without_housing") // * Inclusive language

  TallyPerson TallyPerson[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([ageGroup, gender, activity, isTraversing, isPersonWithImpairment, isInApparentIllicitActivity, isPersonWithoutHousing], name: "person_characteristics")
  @@map("person")
}

model Noise {
  id Int @id @default(autoincrement())

  location   NoiseLocation
  soundLevel Float                                 @map("sound_level")
  point      Unsupported("Geometry(Point, 4326)")?

  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([point], name: "location_idx", type: Gist)
  @@map("noise")
}

// #endregion
